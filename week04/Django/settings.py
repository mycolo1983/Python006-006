"""
Django settings for MyDjango project.

Generated by 'django-admin startproject' using Django 2.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
#### 项目路径
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!guce%#gzd2)950&gkc4o)uu9-1xfb)letb+bo4&b0%)lq_xzo'

#### 调试模式
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#### 域名访问权限
ALLOWED_HOSTS = []

#### App列表，Django默认支持的应用程序，Django的处理规则是从上到下依次去加载应用程序的，
#### 所以不要随意改变它的书写顺序（不需要的可以注释掉），自己的app加到后边
# Application definition

INSTALLED_APPS = [
    #### 内置的后台管理系统
    'django.contrib.admin',
    #### 内置的用户认证系统
    'django.contrib.auth',
    #### 所有model元数据
    'django.contrib.contenttypes',
    #### 会话，表示当前访问网站的用户身份
    'django.contrib.sessions',
    #### 消息提示
    'django.contrib.messages',
    #### 静态资源路径
    'django.contrib.staticfiles',
    #### 注册自己的APP
    'index',
]

#### 中间件是request和response对象之间的钩子，中间件也是有顺序的。请求的过程中间件是从上到下进行加载，返回的过程，是从下到上去返回的
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#### 统一资源定位符的配置。Django接受了一个http请求之后，通过MyDjango.urls文件对你的URL进行匹配
ROOT_URLCONF = 'MyDjango.urls'

#### 模板设置
TEMPLATES = [
    {  #### 定义模板引擎：
       #### 编写前端的一个模板的时候，这个模板由哪个应用程序来处理。处理模板的引擎，一种是Django自带的模板引擎，另外我们还可以用第三方的模板引擎：Flask Web框架的模板引擎Jinja2
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
       #### 设置模板所在的路径:
       ##### 一般不在这里设置，一般在你的每一个应用程序里边放置模板，比如index这个app目录下面新建目录来放置模板
        'DIRS': [],
        #### 是否在App里查找模板文件
        'APP_DIRS': True,
        #### 用于RequestContext上下文的调用函数
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
#### 调用WSGI使用什么样的一个方式
WSGI_APPLICATION = 'MyDjango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
#### 数据库配置, 默认是sqlite, Django2.2使用mysqlclient或pymysql模块连接MySQL

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

#### export PATH=$PATH:/usr/local/mysql/bin
#### OSError mysql_config not found #安装MySQL客户端
#### pip3 install mysqlclient 
#### pip3 install pymysql

DATABASES = {
    #### Django对数据库识别的名称
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'testdb',
        'USER': 'testuser',
        'PASSWORD': 'testpass',
        'HOST': 'localhost',
        'PORT': '3306',
    }
    # 'db2': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'mydatabase',
    #     'USER': 'mydatabaseuser',
    #     'PASWORD': 'mypassword',
    #     'HOST': '127.0.0.1',
    #     'PORT': '3307',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

#### 语言改成相应的工作时区和语言:中文, "UTF-8"字符集;
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

#### 静态文件 js,css样式表，图片保存的目录
#### ,存放在该目录的文件Django可以自动识别
STATIC_URL = '/static/'
